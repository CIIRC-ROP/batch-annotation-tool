#!/usr/bin/env python3

""" klikatko: Annotation tool

Usage:
  klikatko -h | --help
  klikatko [options] <imfile> <attfile> <outfile>

Options:
  -h, --help
  --config CONFIG    Specifi config file
  --debug            Run in debug mode
  --fullscreen       Display in fullscreen
  --table TABLE      Table prefix [default: test]
  --attr ATTR        Attribute to edit [default: backpack]
  --filter FILTER    Where query

The filter follows the SQL WHERE syntax, uses a,b prefixes, where a is for the
outpud db and b is for input attribute db. Some examples:

    klikatko im.db att.db out.db --filter b.backpack=1
    klikatko im.db att.db out.db --filter "b.backpack=1 OR a.backpack=1"


"""

from klikatko import Config

from PIL import Image, ImageTk
from docopt import docopt
from itertools import product, islice
import numpy as np
import tkinter as tk
from tkinter import ttk, filedialog
import logging
import pandas as pd
import os
import random

import sqlite3 as sqlite
import io
import shutil

# main logger
log = logging.getLogger("Klikatko")


def main():
    opt = docopt(__doc__)

    # setup logging
    setup_logging(level="DEBUG" if opt["--debug"] else "INFO")
    log.debug("Command line options:\n%s", str(opt))

    # initialize config
    if opt["--config"] is None:
        opt["--config"] = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'klikatko.json')
        log.debug("Lookin for config in %s", opt['--config'])
    conf = Config(opt["--config"])
    random.seed(conf.get('random_seed', 10))

    if opt["--filter"] is None:
        opt["--filter"] = []
    else:
        opt["--filter"] = [opt["--filter"]]

    # gui root
    root = tk.Tk()

    # prepare database
    sampledb = SQLiteDB(opt['<imfile>'], opt['<attfile>'], opt['<outfile>'], opt['--attr'], opt['--table'], opt['--filter'])

    # if fullscreen open in fullscreen otherwise use geometry in conf file
    if opt['--fullscreen']:
        root.geometry("{0}x{1}+0+0".format(root.winfo_screenwidth(), root.winfo_screenheight()))
    else:
        root.geometry(conf["geometry"])

    # initialize the app
    app = KlikatkoApp(sampledb, master=root)

    # set quit functions
    root.protocol("WM_DELETE_WINDOW", app.on_quit)

    # run main loop
    app.mainloop()


def dict_factory(cursor, row):
    d = {}
    for idx, col in enumerate(cursor.description):
        d[col[0]] = row[idx]
    return d


def thumbnail(im, size, fill_color=(0, 0, 0)):
    im.thumbnail(size)
    x, y = im.size
    new_im = Image.new('RGB', size, fill_color)
    new_im.paste(im, (int((size[0] - x) / 2), int((size[1] - y) / 2)))
    return new_im


def sql_select(table, select='*', limit=None, filters=[], orderby=[], order='ASC'):
    select = ', '.join(select)
    sql = 'SELECT {} FROM {}'.format(select, table)

    if filters:
        sql += ' WHERE ' + ' AND '.join(filters)

    if orderby:
        sql += ' ORDER BY ' + ', '.join(orderby) + ' ' + order

    if limit:
        if isinstance(limit, (int,float)):
            limit = [limit]
        sql += ' LIMIT ' + ', '.join([str(v) for v in limit])

    return sql


class SQLiteDB(object):

    def __init__(self, imdbpath, attdbpath, outpath, attname, table, filters):
        self.con_img = sqlite.connect(imdbpath)
        self.con_img.row_factory = dict_factory
        self.con_att = sqlite.connect(attdbpath)
        self.con_att.row_factory = dict_factory
        self.cur_att = self.con_att.cursor()
        self.cur_img = self.con_img.cursor()
        self.table = table
        self.filters = filters

        self.img_table = '{}_images'.format(self.table)
        self.att_table = '{}_attributes'.format(self.table)
        self.attname = attname
        self.im_size = [40, 100]
        self.attribute_names = self.get_attribute_names()
        self.select_attributes = ['id', self.attname]

        # initialize output
        if not os.path.isfile(outpath):
            self.init_output(attdbpath, outpath)

        self.con_att.execute('ATTACH "{}" AS out'.format(outpath))
        self.N = len(self)

    def get_attribute_names(self):
        sql = sql_select(self.att_table, limit=[1])
        data = self.cur_att.execute(sql).fetchone()
        names = [n for n in data.keys() if n not in ['id', 'xref_type', 'xref', 'person']]
        return names

    def init_output(self, inpath, outpath):
        log.info('Copy %s -> %s', inpath, outpath)
        shutil.copyfile(inpath, outpath)

        con = sqlite.connect(outpath)
        cur = con.cursor()

        for table in ['test', 'train']:
            for att in self.attribute_names:
                cur.execute('UPDATE {}_attributes SET {}=-1'.format(self.table, att))

        cur.execute('ALTER TABLE {}_attributes ADD COLUMN _order INTEGER'.format(self.table))
        cur.execute('CREATE INDEX i_order ON {}_attributes(_order)'.format(self.table))
        
        N = cur.execute('SELECT count(*) AS count from {}'.format(self.att_table)).fetchone()[0]

        order = list(range(N))
        random.shuffle(order)

        for i, o in enumerate(order):
            cur.execute('UPDATE {} SET _order=? WHERE id=?'.format(self.att_table), (o, i+1))

        con.commit()
        con.close()

    def init_view(self):
        sql = 'CREATE VIEW attributes AS'
        sql += '''
        SELECT b.id AS id,
        CASE
            WHEN a.{attname} >= 0 THEN a.{attname}
            ELSE b.{attname}
        END AS backpack
        FROM out.{table} a INNER JOIN main.{table} b ON a.id == b.id
        '''.format(attname=self.attname, table=self.att_table)

        if self.filters:
            sql += 'WHERE ' + ' AND '.join(self.filters)
    
        sql += ' ORDER BY _order ASC'

        log.debug("View:\n%s", sql)
        self.cur_att.execute(sql)

    def sql_select_attributes(self, offset, limit=1, orderby='_order', order='ASC', filters=None, select=None):

        if select is None:

            sql = '''SELECT a.id AS id, _order,
            CASE
                WHEN a.{attname} >= 0 THEN a.{attname}
                ELSE b.{attname}
            END AS backpack
            '''.format(attname=self.attname)
        else:
            sql = 'SELECT ' + ', '.join(select)

        sql += ' FROM out.{table} a INNER JOIN main.{table} b ON a.id == b.id'.format(attname=self.attname, table=self.att_table)

        if filters:
            sql += ' WHERE ' + ' AND '.join(filters)
        elif self.filters:
            sql += ' WHERE ' + ' AND '.join(self.filters)

        sql += ' ORDER BY {} {}'.format(orderby, order)
        if offset == 0:
            sql += ' LIMIT {}'.format(limit)
        else:
            sql += ' LIMIT {}, {}'.format(offset, limit)

        return sql

    def get_image_size(self):
        return self.im_size

    def get_one(self, offset):
        sql = self.sql_select_attributes(offset)
        attout = self.cur_att.execute(sql).fetchone()
        return attout

    def get_many(self, offset, limit):
        sql = self.sql_select_attributes(offset, limit)
        chunk = self.cur_att.execute(sql).fetchall()
        return chunk

    def close(self):
        self.write()
        self.con_img.close()
        self.con_att.close()
        self.con_out.close()

    def get_first_unannotated(self):
        filters = self.filters + ['a.{}<0'.format(self.attname)]
        sql = self.sql_select_attributes(offset=0, filters=filters, limit=1)
        item = self.cur_att.execute(sql).fetchone()

        if item is None:
            return 0

        select = ['count(*) AS count']
        filters = self.filters + ['_order<' + str(item['_order'])]
        sql = self.sql_select_attributes(offset=0, limit=1, filters=filters, select=select)
        item = self.cur_att.execute(sql).fetchone()

        if item is None:
            return 0

        log.debug('First unannotated: %d', item['count'])
        return item['count']

    def set_one(self, attributes):
        log.debug('set_one(%s)', attributes)
        sid = attributes['id']
        value = attributes[self.attname]
        self.cur_att.execute('UPDATE out.{} SET {}=? WHERE id=?'.format(self.att_table, self.attname), (value, sid))

    def set_many(self, attributes):
        for att in attributes:
            self.set_one(att)

    def imread(self, attributes):
        iid = attributes['id']
        sample = self.con_img.execute('SELECT blob FROM {} WHERE id=?'.format(self.img_table), (iid,)).fetchone()
        image = Image.open(io.BytesIO(sample['blob']))
        image = thumbnail(image, self.im_size)
        return image

    def __len__(self):
        select = ['count(*) AS count']
        sql = self.sql_select_attributes(offset=0, limit=1, select=select)
        item = self.cur_att.execute(sql).fetchone()
        return item['count']

    def write(self):
        log.debug('Write db')
        self.con_att.commit()


class ImageGridTk(tk.Frame):

    def __init__(self, imagedb, master=None):
        super().__init__(master, bg='black')

        # configuration values
        self.conf = Config()
        self.zoom = self.conf["zoom_default"]
        self.border = self.conf["image_border"]
        self.padding = self.conf["image_padding"]
        self.save_every = self.conf["save_every"]
        self.column_out = None
        self.column_in = None
        self.column_path = None

        # image db
        self.imagedb = imagedb
        self.N = len(imagedb)

        # button by index in the imagedb
        self.buttons = dict()

        # class value by index in the imagedb
        self.classes = []

        # description of the current cass, used when clicked on an image
        self.current_class_desc = None

        # description of default class
        self.default_class_desc = None

        # number of clicks on next button, used to save the list every n click
        self.next_count = 0

        # position of the first grid image in the imagedb
        self.index = self.imagedb.get_first_unannotated()

        # number of images in the grid view, will be updated by update_ui()
        self.num_images = 0

        # last pressed image name
        self.last_pressed = ''

        # bind configure event, to update the image grid
        self.bind("<Configure>", self.on_configure)

        # bind keyboard shortcuts
        if 'key_clipboard' in self.conf:
            log.debug("keyboard shortcut: %s -> on_clipboard", self.conf["key_clipboard"])
            self.master.bind_all(self.conf["key_clipboard"], self.on_clipboard)

        # initialize user interface
        self.init_ui()

    def init_ui(self):
        # initialize toolbar frame and its content
        self.tool = tk.Frame(self)

        # go through class descritions
        self.class_descs = dict()
        for cdesc in self.conf["classes"]:
            self.init_class(cdesc)
            self.class_descs[cdesc['value']] = cdesc
            if cdesc.get('default', False):
                self.default_class_desc = cdesc
            elif cdesc.get('current', False):
                self.current_class_desc = cdesc

        # next prev button
        self.bt_prev = self.create_toolbar_button("Prev",
                                                  key=self.conf.get("key_prev", None),
                                                  cmd=self.on_prev,
                                                  side=tk.LEFT)
        
        self.bt_next = self.create_toolbar_button("Next",
                                                  key=self.conf.get("key_next", None),
                                                  cmd=self.on_next,
                                                  side=tk.LEFT)

        self.bt_next = self.create_toolbar_button("Next and save",
                                                  key=self.conf.get("key_next_and_save", None),
                                                  cmd=self.on_next_and_save,
                                                  side=tk.LEFT)

        self.bt_zoom_in = self.create_toolbar_button("+",
                                                     key=self.conf.get("key_zoom_in", None),
                                                     cmd=self.on_zoom_in,
                                                     side=tk.RIGHT)

        self.bt_zoom_out = self.create_toolbar_button("-",
                                                      key=self.conf.get("key_zoom_out", None),
                                                      cmd=self.on_zoom_out,
                                                      side=tk.RIGHT)

        # initialize grid
        self.grid = tk.Frame(self)
        self.grid['bg'] = self.conf['background']

        # initialize info line
        self.info = tk.Frame(self)
        self.info_label = tk.Label(self.info, text="text")
        self.info_label.pack(side=tk.LEFT)

        self.tool.pack(side="top", fill="both", expand=False)
        self.grid.pack()
        self.info.pack(side="bottom", fill="both", expand=False)

        self.update_info()

    def init_class(self, desc):
        if "button_all" in desc:
            button = self.create_toolbar_button(**desc["button_all"],
                                                cmd=lambda a=None: self.on_mark_all(desc))
            button['bg'] = desc['color']
            button.pack(side=tk.LEFT)

        if "button_select" in desc:
            button = self.create_toolbar_button(**desc["button_select"],
                                                cmd=lambda a=None: self.on_select(desc))
            button['bg'] = desc['color']
            button.pack(side=tk.LEFT)

    def on_configure(self, event):
        log.debug("Configure event: %d, %d", event.width, event.height)
        self.widget_size = (event.width, event.height)
        self.update_grid()
        self.update_info()

    def on_zoom_in(self, event=None):
        log.debug("on_zoom_in() current zoom: %f", self.zoom)
        if self.zoom * self.conf["zoom_step"] <= self.conf["zoom_max"]:
            self.zoom *= self.conf["zoom_step"]
            self.update_grid()
            self.update_info()
        else:
            log.warn("Already maximal zoom.")

    def on_zoom_out(self, event=None):
        log.debug("on_zoom_out() current zoom: %f", self.zoom)
        if self.zoom / self.conf["zoom_step"] >= self.conf["zoom_min"]:
            self.zoom /= self.conf["zoom_step"]
            self.update_grid()
            self.update_info()
        else:
            log.warn("Already minimal zoom.")

    def on_zoom_reset(self):
        self.zoom = self.conf["zoom_default"]
        self.update_grid()
        self.update_info()

    def on_mark_all(self, aclass):
        log.debug("on_mark_all(aclass=%s)", aclass["name"])
        for key in self.buttons.keys():
            self.annotate(key, aclass)

    def on_select(self, aclass):
        log.debug("on_select(aclass=%s)", aclass["name"])
        self.current_class_desc = aclass
        self.update_info()

    def on_next(self, event=None):
        log.debug("on_next()")

        if self.index + self.num_images > len(self.imagedb):
            log.debug("End of file!")
        else:
            self.index += self.num_images

        self.update_grid()
        self.update_info()

    def on_next_and_save(self, event=None):
        log.debug("on_next_and_save()")

        self.next_count += 1
        self.store_annotations()

        if self.next_count >= self.save_every:
            self.next_count = 0
            self.imagedb.write()

        self.on_next()

    def on_prev(self, event=None):
        log.debug("on_prev()")
        self.index = max(0, self.index - self.num_images)
        self.update_grid()
        self.update_info()

    def on_click(self, index):
        log.debug("on_click(index=%d, img=%s)", index, self.buttons[index]['text'])

        # store last pressed image
        self.last_pressed = self.buttons[index]['text']

        # update info to show last pressed
        self.update_info()

        if self.current_class_desc is None:
            log.warn("No active class")
            return

        # annotate image
        self.annotate(index, self.current_class_desc)

    def on_clipboard(self, event=None):
        log.debug("on_clipboard()")
        self.master.clipboard_clear()
        self.master.clipboard_append(self.last_pressed)

    def store_annotations(self):
        # store annotations
        self.imagedb.set_many(self.attributes)

    def annotate(self, index, cdesc):
        log.debug("annotate(index=%d)", index)
        self.attributes[index][self.imagedb.attname] = cdesc['value']
        self.update_image_button(index, cdesc)

    def update_image_button(self, index, cdesc):
        button = self.buttons[index]
        button.configure(bg=cdesc['color'],
                         activebackground=cdesc['color'])

        image = self.imagedb.imread(self.attributes[index])
        image.putalpha(self.conf.get('clicked_alpha', 100))

        if self.zoom != 1:
            image = image.resize((int(image.size[0]*self.zoom),int(image.size[1]*self.zoom)))
        photo = ImageTk.PhotoImage(image)
        button["image"] = photo
        button.photo = photo

    def clear_all(self):
        log.debug("clear_all()")
        for button in self.buttons.values():
            button.grid_forget()
            button.destroy()
        self.buttons = dict()

    def update_info(self):
        log.debug("update_info()")

        text = []

        text.append("index: {}/{}".format(self.index, len(self.imagedb)))

        if self.num_images > 0:
            text.append("images: {}".format(self.num_images))

        if self.current_class_desc:
            text.append("select: {}".format(self.current_class_desc["name"]))
            self.info["bg"] = self.current_class_desc["color"]
            self.info_label["bg"] = self.current_class_desc["color"]
        text.append("zoom: {:1.3f}".format(self.zoom))

        if self.last_pressed is not None and len(self.last_pressed) > 0:
            text.append("last: {}".format(self.last_pressed))

        self.info_label['text'] = " | ".join(text)

    def update_grid(self):
        # log.debug("update ui size: %s zoom: %f", size, zoom)
        self.clear_all()

        # get size of the widget
        widget_width, widget_height = self.widget_size
        log.debug("Widget size w: {} h: {}".format(widget_width, widget_height))

        # size of the image
        image_width, image_height = self.imagedb.get_image_size()
        log.debug("Image orig size w: {} h: {}".format(image_width, image_height))

        log.debug("Image zoomed size w: {} h: {}".format(image_width*self.zoom, image_height*self.zoom))

        # compute number of rows and collumns
        rows = int(widget_height // (image_height*self.zoom + 2*self.padding + 2*self.border + 5))
        cols = int(widget_width // (image_width*self.zoom + 2*self.padding + 2*self.border + 5))

        log.debug("Grid size c: {} r: {}".format(cols, rows))

        # cnfigure padding
        for i in range(rows):
            self.grid.rowconfigure(i, pad=self.padding)

        for j in range(cols):
            self.grid.columnconfigure(j, pad=self.padding)

        self.num_images = rows * cols
        self.attributes = self.imagedb.get_many(self.index, self.num_images)
        self.num_images = len(self.attributes)

        if self.num_images <= 0:
            log.warning("No images!")
            return

        # create all buttons
        k = 0
        for i, j in islice(product(range(rows), range(cols)), self.num_images):
            cdesc = self.class_descs[self.attributes[k][self.imagedb.attname]]

            button = self.create_image_button(k, zoom=self.zoom, cdesc=cdesc)
            button.grid(row=i, column=j)
            self.buttons[k] = button
            k += 1

        # pack frame
        self.grid.pack()

    def create_image_button(self, index, cdesc, zoom=1):
        log.debug("create_image_button(index=%d,...)", index)
        button = tk.Button(self.grid,
                           bd=self.border,
                           bg=cdesc['color'],
                           activebackground=cdesc['color'],
                           relief=tk.FLAT)

        button["text"] = str(self.attributes[index]['id'])
        button["command"] = lambda: self.on_click(index)
        image = self.imagedb.imread(self.attributes[index])

        if zoom != 1:
            image = image.resize((int(image.size[0]*zoom),int(image.size[1]*zoom)))
        photo = ImageTk.PhotoImage(image)
        button["image"] = photo
        button.photo = photo
        return button

    def create_toolbar_button(self, text, cmd=None, key=None, side=tk.RIGHT):

        log.debug("create_toolbar_button(text=%s,...)", text)
        button = tk.Button(self.tool)
        button["text"] = text

        if cmd is not None:
            button["command"] = cmd
            log.debug("Register button %s command %s.%s", text, cmd.__module__, cmd.__name__)

            if key:
                self.master.bind_all(key, cmd)
                log.debug("Bind %s to %s.%s", key, cmd.__module__, cmd.__name__)
        button.pack(side=side)
        return button


class KlikatkoApp(tk.Frame):

    def __init__(self, imagedb, master=None):
        super().__init__(master)
        self.imagedb = imagedb
        self.pack()
        self.init_ui()

    def init_ui(self):
        # main window
        self.master.title("Klikatko")
        # grid view
        self.grid = ImageGridTk(self.imagedb, self)
        self.grid.pack(fill=tk.BOTH, expand=True)
        self.pack(fill=tk.BOTH, expand=True)

        return

    def add_button(self, master, text, command=None, shortcut=None, side="right"):
        log.debug("Adding button: %s", text)
        button = tk.Button(master)
        button["text"] = text
        button.pack(side=side)

        if command is not None:
            button["command"] = command
            log.debug("Register button %s command %s", text, str(command))

            if shortcut is not None:
                self.master.bind(shortcut, command)
                log.debug("Bind %s to %s", shortcut, str(command))
        return button

    def on_quit(self, event=None):
        log.info("Quiting")
        self.imagedb.write()
        self.master.destroy()

    def on_test(self, event=None):
        log.debug("Received test event: %s", str(event))

    def on_mouse_motion(self, event):
        x, y = event.x, event.y
        log.debug('{}, {}'.format(x, y))
        log.debug(str(event))


def pd_ensure_columns(df, n, val=np.nan):
    """Ensure number of columns of pandas frame"""
    log.debug("pd_ensure_columns(df, n=%d, val=%s)", n, str(val))
    M, N = df.shape

    for i in range(n - N):
        df[n+i] = val

    return df


def setup_logging(level):
    log.setLevel(level)
    formatter = logging.Formatter('%(name)s:%(levelname)s: %(message)s')
    ch = logging.StreamHandler()
    ch.setLevel(level)
    ch.setFormatter(formatter)

    log.addHandler(ch)


if __name__ == "__main__":
    main()
