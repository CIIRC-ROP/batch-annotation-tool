#!/usr/bin/env python3

""" klikatko: Annotation tool

Usage:
  klikatko -h | --help
  klikatko [options] <csvfile>

Options:
  -h, --help
  --config CONFIG    Specifi config file [default: klikatko.json]
  --debug            Run in debug mode
  --fullscreen       Display in fullscreen
"""

from PIL import Image, ImageTk
from docopt import docopt
import numpy as np
import tkinter as tk
from tkinter import ttk
import logging

# main logger
log = logging.getLogger()


# text
def main():
    opt = docopt(__doc__)

    # setup logging
    logging.basicConfig(level = "DEBUG" if opt["--debug"] else "INFO")

    root = tk.Tk()

    if opt['--fullscreen']:
        root.geometry("{0}x{1}+0+0".format(root.winfo_screenwidth(), root.winfo_screenheight()))
    else:
        root.geometry("300x300+200+200")
    app = KlikatkoApp(master=root)

    # move the window to top on MacOS
    root.lift()
    root.call('wm', 'attributes', '.', '-topmost', True)
    root.after_idle(root.call, 'wm', 'attributes', '.', '-topmost', False)

    # set quit functions
    root.protocol("WM_DELETE_WINDOW", app.on_quit)

    # run main loop
    app.mainloop()


class ImageSample(object):

    def __init__(self, filename, **kvargs):
        self.filename = filename
        self.kvargs = kvargs


class KlikatkoApp(tk.Frame):

    def __init__(self, master=None):
        super().__init__(master)
        self.pack()
        self.init_ui()

    def init_ui(self):
        # main window
        self.master.title("Klikatko")

        # toolbar
        self.toolbar = tk.Frame(self)
        self.toolbar.pack(side="top", fill="both", expand=False)

        self.quit = self.add_button(self.toolbar, "quit",
                                    command=self.on_quit)

        self.test = self.add_button(self.toolbar, "test",
                                    command=self.on_test,
                                    shortcut="<Return>")

        # grid view
        self.grid = tk.Frame(self, bg="red")
        self.grid.pack(fill=tk.BOTH, expand=True)
        self.pack(fill=tk.BOTH, expand=True)
        self.grid.bind('<Button-1>', self.on_mouse_motion)

        return

    def add_button(self, master, text, command=None, shortcut=None, side="right"):
        log.debug("Adding button: %s", text)
        button = tk.Button(master)
        button["text"] = text
        button.pack(side=side)

        if command is not None:
            button["command"] = command
            log.debug("Register button %s command %s", text, str(command))

            if shortcut is not None:
                self.master.bind(shortcut, command)
                log.debug("Bind %s to %s", shortcut, str(command))
        return button

    def on_quit(self, event=None):
        log.info("Quiting")
        self.master.destroy()

    def on_test(self, event=None):
        log.debug("Received test event: %s", str(event))

    def on_mouse_motion(self,event):
        x, y = event.x, event.y
        log.debug('{}, {}'.format(x, y))
        log.debug(str(event))


if __name__ == "__main__":
    main()
